<?php
/**
 * @file
 * Install, update, and uninstall functions for the blogger.
 */

/**
 * Implements install.
 */
function blogger_install() {
  $t = get_t();
  node_types_rebuild();
  $list = node_type_get_types();
  $list_type = array();
  foreach ($list as $item) {
    $list_type[] = $item->type;
  }
  if (!in_array('blog', $list_type)) {
    $vocabulary = array(
      'name' => 'Blog Categories',
      'machine_name' => 'blog_categories',
      'description' => 'Categories for blog type',
      'hierarchy' => 0,
      'module' => 'taxonomy',
    );
    $vocabulary = (object) $vocabulary;
    taxonomy_vocabulary_save($vocabulary);
    /*create all the fields we are adding to our content type*/
    foreach (blogger_installed_fields() as $field) {
      field_create_field($field);
    }

    /*create all the instances for our fields*/
    foreach (blogger_installed_instances() as $instance) {
      $instance['entity_type'] = 'node';
      $instance['bundle'] = 'blog';
      field_create_instance($instance);
    }
  }
}
 /**
  * Implements uninstall.
  */
function blogger_uninstall() {
  $sql = 'SELECT nid FROM {node} n WHERE n.type = :type';
  $result = db_query($sql, array(':type' => 'blog'));
  $nids = array();
  foreach ($result as $row) {
    $nids[] = $row->nid;
  }
  /*Delete all the nodes at once*/
  node_delete_multiple($nids);
}
 /**
  * Implements installed fields.
  */
function blogger_installed_fields() {
  $t = get_t();
  return array(
    'blog_category' => array(
      'active' => 1,
      'cardinality' => 6,
      'deleted' => 0,
      'entity_types' => array(),
      'field_name' => 'field_blog_category',
      'indexes' => array(
        'tid' => array(
          0 => 'tid',
        ),
      ),
      'locked' => 0,
      'module' => 'taxonomy',
      'settings' => array(
        'allowed_values' => array(
          0 => array(
            'vocabulary' => 'blog_categories',
            'parent' => 0,
          ),
        ),
      ),
      'translatable' => 0,
      'type' => 'taxonomy_term_reference',
    ),
    'blog_image' => array(
      'field_name' => 'field_blog_image',
      'label' => $t('Blog image'),
      'cardinality' => 1,
      'type' => 'image',
      'settings' => array(
        'default_image' => 0,
        'uri_scheme' => 'public',
      ),
    ),
  );
}
 /**
  * Implements installed instances.
  */
function blogger_installed_instances() {
  $t = get_t();
  return array(
    'blog_category' => array(
      'bundle' => 'blog',
      'default_value' => NULL,
      'deleted' => 0,
      'description' => '',
      'display' => array(
        'default' => array(
          'label' => 'above',
          'module' => 'taxonomy',
          'settings' => array(),
          'type' => 'taxonomy_term_reference_link',
          'weight' => 3,
        ),
        'teaser' => array(
          'label' => 'above',
          'settings' => array(),
          'type' => 'hidden',
          'weight' => 0,
        ),
      ),
      'entity_type' => 'node',
      'field_name' => 'field_blog_category',
      'label' => 'Category',
      'required' => 0,
      'settings' => array(
        'user_register_form' => FALSE,
      ),
      'widget' => array(
        'active' => 1,
        'module' => 'options',
        'settings' => array(),
        'type' => 'options_select',
        'weight' => -1,
      ),
    ),
    'blog_image' => array(
      'field_name' => 'field_blog_image',
      'label' => $t('Blog image'),
      'cardinality' => 1,
      'type' => 'image',
      'settings' => array(
        'default_image' => 0,
        'uri_scheme' => 'public',
      ),
    ),
  );
}
